-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/documentation/getting-started/download
--    В IDEA можно просто импортировать данный проект

-- 2. Определите аналоги следующих функций на языке Haskell
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) => y
\func apply (f : Nat -> Nat) (x : Nat) => f x
\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг

\import lect01 \hiding (+, *)

\func  f1 (x _ : Nat) => x
\func  f2 : Nat => 0
\func \infix 1 f3 (_ : Nat -> Nat) (_ : Nat) : Int => 0
\func  f4 : Nat => 0
\func \infix 2 f5 => f1
\func  f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (x t e : Bool) : Bool \elim x
  | true => t
  | false => e

-- 5. Определите || через if

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел

\open Nat \hiding (-, div) -- Здесь лежат + и *
\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x ^ y * x

\func fac (x : Nat) : Nat \elim x
  | 0 => 1
  | suc x \as y => fac x * y

-- 7. Определите mod и gcd

\func if' (x : Bool) (t e : Nat) : Nat \elim x
  | true => t
  | false => e

\func mod (x y : Nat) => aux x x y
  \where {
    \func aux (fuel x y : Nat) : Nat \elim fuel
      | 0 => 0
      | suc fuel => if' (x < y) x (aux fuel (x - y) y)
  }

\func gcd (x y : Nat) : Nat => if' (x < y) (aux y x y) (aux x x y)
    \where {
      \func isZero (x : Nat) : Bool \elim x
        | 0 => true
        | _ => false

      \func aux (fuel x y : Nat) : Nat \elim fuel
        | 0 => 0
        | suc fuel => if' (isZero y) x (aux fuel y (mod x y))
    }